#include "CoreModule.h"
#include "renderer/RenderContext.h"

#include <ecs/resources/ComponentResource.h>
#include <ecs/resources/SystemResource.h>
#include <ecs/resources/SystemsGroupResource.h>
#include <serialization/SerializerResource.h>
#include "ecs/transform/LocalTransformSystem.h"
#include "ecs/transform/GlobalTransformSystem.h"
#include "ecs/transform/ParentSystem.h"
#include "assets/AssetContext.h"

using namespace modulith;

void OnInitialize(ModuleResources& module){
    module.Register<SubcontextResource<RenderContext>>();
    module.Register<SubcontextResource<ECSContext>>();
    module.Register<SubcontextResource<SerializationContext>>();
    module.Register<SubcontextResource<AssetContext>>();

    module.Register<ComponentResource<DisabledTag>>("Disabled");
    module.Register<SerializerResource<DisabledTag, TrivialSerializer<DisabledTag>>>();
    module.Register<ComponentResource<IndirectlyDisabledTag>>("DisabledInHierarchy");
    module.Register<SerializerResource<IndirectlyDisabledTag, TrivialSerializer<IndirectlyDisabledTag>>>();
    module.Register<ComponentResource<NameData>>("Name");
    module.Register<SerializerResource<NameData>>();

    module.Register<ComponentResource<WithParentData>>("WithParent");
    module.Register<SerializerResource<WithParentData>>();
    module.Register<ComponentResource<WithChildrenData>>("WithChildren");

    module.Register<ComponentResource<PositionData>>("Position");
    module.Register<SerializerResource<PositionData>>();
    module.Register<ComponentResource<RotationData>>("Rotation");
    module.Register<SerializerResource<RotationData>>();
    module.Register<ComponentResource<ScaleData>>("Scale");
    module.Register<SerializerResource<ScaleData>>();

    module.Register<ComponentResource<LocalTransformData>>("LocalTransform");
    module.Register<SerializerResource<LocalTransformData>>();
    module.Register<ComponentResource<GlobalTransformData>>("GlobalTransform");
    module.Register<SerializerResource<GlobalTransformData>>();

    module.Register<SystemsGroupResource<InputSystemsGroup>>();
    module.Register<SystemsGroupResource<TransformSystemsGroup, ExecuteAfter<InputSystemsGroup>>>();
    module.Register<SystemsGroupResource<LogicSystemsGroup, ExecuteAfter<TransformSystemsGroup>>>();

    module.Register<SystemResource<LocalTransformSystem, InGroup<TransformSystemsGroup>>>();
    module.Register<SystemResource<ParentSystem, InGroup<TransformSystemsGroup>, ExecuteAfter<LocalTransformSystem>>>();
    module.Register<SystemResource<GlobalTransformSystem, InGroup<TransformSystemsGroup>, ExecuteAfter<ParentSystem>>>();
}

void OnShutdown(ModuleResources& module){

}

// begin autogenerated

extern "C++" {

void __declspec(dllexport) __cdecl Initialize(ModuleResources& module) {
    OnInitialize(module);
}


void __declspec(dllexport) __cdecl Shutdown(ModuleResources& module){
    OnShutdown(module);
}

}

// end autogenerated
